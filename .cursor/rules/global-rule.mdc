---
alwaysApply: true
---
# Roadmap создания 2D-редактора игр на PyQt6

> **Цель:** получить минимально двусмысленный план, где **одна задача = одно изменение**, которое легко проверить.  
> **Формат задач:** `[ID] Краткое название` — описание; **Критерий готовности** — проверяемый факт/результат; **Затрагиваемые файлы** — минимальный набор.

## Правила для ИИ-исполнителя
1. Выполняй задачи строго по порядку ID (по возрастанию).
2. В одной задаче изменяй только перечисленные файлы.
3. Соблюдай стиль кода: `ruff`, `black`, `isort`. Типизация — где указано.
4. Сообщения коммитов: `ID: краткое описание`.
5. Перед коммитом запускай линтеры и тесты (где уже добавлены).
6. Если задача говорит “создать”, **не меняй** существующие файлы, кроме явно указанных.

---

## P0. Организационная база

- [P0-001] В корне создать файл `README.md` с 3 разделами: Описание, Сборка/Запуск, Структура.  
  **Критерий готовности:** файл существует, содержит 3 указанных раздела.  
  **Файлы:** `README.md`

- [P0-002] Добавить `LICENSE` (MIT).  
  **Критерий готовности:** файл `LICENSE` с текстом MIT.  
  **Файлы:** `LICENSE`

- [P0-003] Добавить `.gitignore` для Python/Qt/venv/pyinstaller.  
  **Критерий готовности:** игнорируются `__pycache__`, `.venv`, `dist`, `build`, `*.spec`, `.qt_creator` и т.п.  
  **Файлы:** `.gitignore`

---

## P1. Окружение и зависимости

- [P1-001] Создать `pyproject.toml` c зависимостями: `PyQt6`, `pydantic`, `pyyaml`, `Pillow`; dev: `pytest`, `pytest-qt`, `ruff`, `black`, `isort`.  
  **Критерий готовности:** `pip install -e .` проходит без ошибок.  
  **Файлы:** `pyproject.toml`

- [P1-002] Добавить `requirements-lock.txt` через `pip freeze > requirements-lock.txt`.  
  **Критерий готовности:** файл существует и не пуст.  
  **Файлы:** `requirements-lock.txt`

- [P1-003] Настроить `ruff`/`black`/`isort` конфиг в `pyproject.toml`.  
  **Критерий готовности:** запуск инструментов без предупреждений на текущем коде.  
  **Файлы:** `pyproject.toml`

- [P1-004] Добавить `pytest.ini` c базовой конфигурацией.  
  **Критерий готовности:** `pytest -q` отрабатывает (0 тестов или базовые проходят).  
  **Файлы:** `pytest.ini`

- [P1-005] Добавить `Makefile` с целями: `install`, `lint`, `test`, `run`.  
  **Критерий готовности:** `make lint`, `make test`, `make run` выполняются.  
  **Файлы:** `Makefile`

---

## P2. Каркас приложения (PyQt6)

- [P2-001] Создать пакет `app/` с пустым `__init__.py`.  
  **Критерий готовности:** пакет импортируется.  
  **Файлы:** `app/__init__.py`

- [P2-002] Добавить `app/main.py` с запуском `QApplication` и пустым окном `QMainWindow`.  
  **Критерий готовности:** окно запускается командой `python -m app.main`.  
  **Файлы:** `app/main.py`

- [P2-003] Создать `app/ui/main_window.py` с классом `MainWindow(QMainWindow)`.  
  **Критерий готовности:** окно создаётся из этого класса.  
  **Файлы:** `app/ui/main_window.py`

- [P2-004] В `MainWindow` добавить меню: File, Edit, View, Help (пустые пункты).  
  **Критерий готовности:** меню отображаются.  
  **Файлы:** `app/ui/main_window.py`

- [P2-005] Добавить пустую центральную область `QWidget` (пока-заглушка).  
  **Критерий готовности:** окно с центральной областью.  
  **Файлы:** `app/ui/main_window.py`

- [P2-006] Добавить статус-бар и строку состояния “Ready”.  
  **Критерий готовности:** статус-бар виден.  
  **Файлы:** `app/ui/main_window.py`

---

## P3. Док-панели и центральная сцена

- [P3-001] Создать `app/ui/docks/` и пустые классы панелей: `HierarchyDock`, `InspectorDock`, `AssetsDock`, `ConsoleDock` (наследники `QDockWidget`).  
  **Критерий готовности:** 4 файла-класса созданы, подключаются.  
  **Файлы:** `app/ui/docks/*.py`

- [P3-002] Прикрепить панели к `MainWindow` (по умолчанию: слева — Hierarchy, справа — Inspector, снизу — Console; Assets — слева снизу).  
  **Критерий готовности:** панели видимы/перетаскиваемы.  
  **Файлы:** `app/ui/main_window.py`

- [P3-003] Создать центральный `QGraphicsView` + `QGraphicsScene` как Canvas.  
  **Критерий готовности:** виджет отображается, сцена пустая.  
  **Файлы:** `app/ui/canvas.py`, `app/ui/main_window.py`

- [P3-004] Добавить сохранение/восстановление раскладки док-панелей при закрытии/запуске.  
  **Критерий готовности:** после перезапуска расположение сохраняется.  
  **Файлы:** `app/ui/main_window.py`

---

## P4. Настройки и темы

- [P4-001] Создать модуль `app/core/settings.py` (Pydantic-модель) с путём конфигов (AppData).  
  **Критерий готовности:** JSON настроек создаётся при первом запуске.  
  **Файлы:** `app/core/settings.py`

- [P4-002] Реализовать загрузку/сохранение настроек при старте/выходе.  
  **Критерий готовности:** изменения параметров сохраняются.  
  **Файлы:** `app/core/settings.py`, `app/main.py`

- [P4-003] Добавить 2 темы (light/dark) через `qss` файлы.  
  **Критерий готовности:** переключение тем из меню View.  
  **Файлы:** `app/ui/themes/light.qss`, `app/ui/themes/dark.qss`, `app/ui/main_window.py`

---

## P5. Система команд и Undo/Redo

- [P5-001] Добавить `app/core/commands.py` с обёрткой над `QUndoStack`.  
  **Критерий готовности:** стек создаётся, доступен в окне.  
  **Файлы:** `app/core/commands.py`, `app/ui/main_window.py`

- [P5-002] Добавить пункты меню Edit: Undo/Redo с шорткатами `Ctrl+Z/Ctrl+Y`.  
  **Критерий готовности:** пункты активны (пока без команд).  
  **Файлы:** `app/ui/main_window.py`

- [P5-003] Пример команды `SetStatusMessage(text)` (добавить/отменить сообщение).  
  **Критерий готовности:** Undo/Redo меняют статус-строку.  
  **Файлы:** `app/core/commands.py`, `app/ui/main_window.py`

---

## P6. Формат проекта и файловая структура

- [P6-001] Определить структуру проекта: папка `.gameproj/` c `project.json`, `assets/`, `scenes/`.  
  **Критерий готовности:** описано в `README.md`.  
  **Файлы:** `README.md`

- [P6-002] Имплементировать “New Project” (диалог выбора папки, имени, базового размера сцены).  
  **Критерий готовности:** создаются папки/`project.json`.  
  **Файлы:** `app/ui/dialogs/new_project.py`, `app/core/project.py`, `app/ui/main_window.py`

- [P6-003] Имплементировать “Open Project” (валидация структуры).  
  **Критерий готовности:** при открытии загружается `project.json`.  
  **Файлы:** `app/core/project.py`, `app/ui/main_window.py`

- [P6-004] Имплементировать “Save Project” и “Save As…”.  
  **Критерий готовности:** `project.json` обновляется.  
  **Файлы:** `app/core/project.py`, `app/ui/main_window.py`

- [P6-005] Список “Recent Projects” (последние 5 путей).  
  **Критерий готовности:** меню File показывает список, открывает проект.  
  **Файлы:** `app/core/settings.py`, `app/ui/main_window.py`

---

## P7. Модель сцены

- [P7-001] Создать `app/core/scene.py`: классы `Scene`, `Node`, компоненты `Transform`.  
  **Критерий готовности:** можно создать пустую сцену с корнем.  
  **Файлы:** `app/core/scene.py`

- [P7-002] Сериализация/десериализация сцены в `scenes/*.json`.  
  **Критерий готовности:** новая сцена сохраняется и загружается без потерь.  
  **Файлы:** `app/core/scene.py`, `app/core/project.py`

- [P7-003] Панель Hierarchy показывает дерево узлов сцены.  
  **Критерий готовности:** добавление узлов отражается в дереве.  
  **Файлы:** `app/ui/docks/hierarchy.py`, `app/core/scene.py`

- [P7-004] Добавить операции: добавить узел-потомок, удалить узел.  
  **Критерий готовности:** действия доступны из контекстного меню Hierarchy.  
  **Файлы:** `app/ui/docks/hierarchy.py`, `app/core/scene.py`, `app/core/commands.py`

---

## P8. Канвас и взаимодействие

- [P8-001] Реализовать пан/зум (колесо мыши + Ctrl, средняя кнопка — панорама).  
  **Критерий готовности:** канвас масштабируется и двигается.  
  **Файлы:** `app/ui/canvas.py`

- [P8-002] Отрисовать сетку (шаг настраивается).  
  **Критерий готовности:** сетка включается/выключается из View.  
  **Файлы:** `app/ui/canvas.py`, `app/core/settings.py`

- [P8-003] Инструмент “Выделение”: клик/рамка, множественный выбор (Shift).  
  **Критерий готовности:** выделение отображается, список в Hierarchy синхронен.  
  **Файлы:** `app/ui/canvas.py`, `app/ui/tools/selection.py`

- [P8-004] Гизмо перемещения (drag), привязка к сетке (toggle).  
  **Критерий готовности:** узлы перемещаются, координаты обновляются.  
  **Файлы:** `app/ui/tools/move_gizmo.py`, `app/core/scene.py`

- [P8-005] Удаление/копирование/вставка выделенных узлов.  
  **Критерий готовности:** узлы копируются с потомками.  
  **Файлы:** `app/core/commands.py`, `app/ui/main_window.py`

---

## P9. Инспектор свойств

- [P9-001] Панель Inspector: генерация редакторов по типам (int/float/str/bool).  
  **Критерий готовности:** изменение значения меняет модель узла.  
  **Файлы:** `app/ui/docks/inspector.py`

- [P9-002] Редактор Transform (позиция X/Y, угол, масштаб).  
  **Критерий готовности:** двусторонняя синхронизация с канвасом.  
  **Файлы:** `app/ui/docks/inspector.py`, `app/core/scene.py`

- [P9-003] Отмена/повтор для изменений в Inspector.  
  **Критерий готовности:** Undo/Redo корректно откатывают.  
  **Файлы:** `app/core/commands.py`, `app/ui/docks/inspector.py`

---

## P10. Панель Assets и импорт ресурсов

- [P10-001] Панель Assets: дерево каталога `assets/`.  
  **Критерий готовности:** отображение файлов/папок.  
  **Файлы:** `app/ui/docks/assets.py`

- [P10-002] Импорт изображений (png/jpg) — копирование в `assets/`.  
  **Критерий готовности:** через кнопку “Import” файл появляется в `assets/`.  
  **Файлы:** `app/ui/docks/assets.py`, `app/core/assets.py`

- [P10-003] Генерация миниатюр (Thumbnails) для изображений.  
  **Критерий готовности:** предпросмотр в панели Assets.  
  **Файлы:** `app/core/assets.py`

---

## P11. Спрайты и анимации

- [P11-001] Компонент `SpriteRenderer` (узел со ссылкой на текстуру).  
  **Критерий готовности:** спрайт отрисовывается на канвасе.  
  **Файлы:** `app/core/scene.py`, `app/ui/canvas.py`

- [P11-002] Инструмент “Создать спрайт” (из выбранного ассета).  
  **Критерий готовности:** из Assets можно добавить спрайт в сцену.  
  **Файлы:** `app/ui/docks/assets.py`, `app/core/commands.py`

- [P11-003] Редактор спрайт-листа: выбор прямоугольной области текстуры.  
  **Критерий готовности:** можно задать region и сохранить в сцене.  
  **Файлы:** `app/ui/editors/spritesheet_editor.py`

- [P11-004] Мини-редактор анимации: список кадров (regions) + FPS.  
  **Критерий готовности:** предпросмотр анимации в отдельном окне.  
  **Файлы:** `app/ui/editors/animation_editor.py`

---

## P12. Тайлмапы

- [P12-001] Импорт тайлсета: изображение + размер тайла (w,h).  
  **Критерий готовности:** создаётся метаданные тайлсета.  
  **Файлы:** `app/core/tilemap.py`, `app/ui/docks/assets.py`

- [P12-002] Узел `Tilemap` (многослойный).  
  **Критерий готовности:** отображение слоя на канвасе.  
  **Файлы:** `app/core/tilemap.py`, `app/ui/canvas.py`

- [P12-003] Инструменты рисования тайлов: карандаш/прямоугольник/заливка.  
  **Критерий готовности:** изменения видны, сохраняются в сцене.  
  **Файлы:** `app/ui/tools/tile_brush.py`, `app/core/tilemap.py`

- [P12-004] Слои тайлмапа: добавление/удаление/порядок/видимость/прозрачность.  
  **Критерий готовности:** панель слоёв управляет рендером.  
  **Файлы:** `app/ui/docks/layers.py`, `app/core/tilemap.py`

- [P12-005] Экспорт тайлмапа в JSON (в папку сцены).  
  **Критерий готовности:** файл создаётся, валиден.  
  **Файлы:** `app/core/tilemap.py`

---

## P13. Префабы

- [P13-001] Создать префаб из выделения (сохранить как `.prefab.json` в `assets/`).  
  **Критерий готовности:** файл создаётся, содержит структуру узлов.  
  **Файлы:** `app/core/prefab.py`, `app/ui/main_window.py`

- [P13-002] Инстанцировать префаб в сцену.  
  **Критерий готовности:** узлы добавляются из файла префаба.  
  **Файлы:** `app/core/prefab.py`, `app/core/commands.py`

- [P13-003] Редактирование префаба с обновлением инстансов (простая замена).  
  **Критерий готовности:** изменения отражаются при повторной загрузке.  
  **Файлы:** `app/core/prefab.py`

---

## P14. Скрипты

- [P14-001] Компонент `Script` (ссылка на `.py` в `assets/`).  
  **Критерий готовности:** компонент хранит путь и свойства.  
  **Файлы:** `app/core/scene.py`

- [P14-002] Панель “Script Console” (выполнение в ограниченном окружении).  
  **Критерий готовности:** можно выполнить `print("ok")` и увидеть вывод.  
  **Файлы:** `app/ui/docks/console.py`

- [P14-003] Чтение/экспорт свойств из скрипта (атрибуты для Inspector).  
  **Критерий готовности:** свойства отображаются и редактируются.  
  **Файлы:** `app/ui/docks/inspector.py`, `app/core/scene.py`

---

## P15. Экспорт проекта (Pygame-шаблон)

- [P15-001] Интерфейс экспорта: `Exporter` (стратегия) + меню “Export…”.  
  **Критерий готовности:** диалог выбора стратегии (пока 1 — Pygame).  
  **Файлы:** `app/core/exporter.py`, `app/ui/main_window.py`

- [P15-002] Экспорт ассетов в целевую папку (копирование/структура).  
  **Критерий готовности:** ассеты скопированы, структура создана.  
  **Файлы:** `app/core/exporters/pygame_exporter.py`

- [P15-003] Генерация стартового кода Pygame (main.py, загрузка сцены JSON).  
  **Критерий готовности:** экспорт запускается `python main.py` (пустая сцена).  
  **Файлы:** `app/core/exporters/pygame_exporter.py`, `templates/pygame/*`

---

## P16. Горячие клавиши и настройки

- [P16-001] Реестр действий (`ActionRegistry`) и назначение шорткатов.  
  **Критерий готовности:** центральное хранение шорткатов.  
  **Файлы:** `app/core/actions.py`, `app/ui/main_window.py`

- [P16-002] Диалог Preferences (вкладки: Общие, Тема, Сетка, Шорткаты).  
  **Критерий готовности:** значения меняются и сохраняются.  
  **Файлы:** `app/ui/dialogs/preferences.py`, `app/core/settings.py`

---

## P17. Автосохранение и восстановление

- [P17-001] Автосохранение сцены каждые N минут (настройка).  
  **Критерий готовности:** в `.autosave/` появляются версии.  
  **Файлы:** `app/core/autosave.py`, `app/core/settings.py`

- [P17-002] Диалог восстановления при старте, если есть крэш-версии.  
  **Критерий готовности:** при падении/перезапуске предлагает восстановление.  
  **Файлы:** `app/ui/dialogs/recovery.py`

---

## P18. Тестирование

- [P18-001] Юнит-тесты для `scene` сериализации.  
  **Критерий готовности:** тесты зелёные.  
  **Файлы:** `tests/test_scene_serialization.py`

- [P18-002] Тесты импортера ассетов (png).  
  **Критерий готовности:** тесты зелёные.  
  **Файлы:** `tests/test_assets_import.py`

- [P18-003] UI-тест: открытие главного окна (pytest-qt).  
  **Критерий готовности:** тест зелёный.  
  **Файлы:** `tests/test_main_window.py`

---

## P19. Стабилизация UX

- [P19-001] Сохранение/загрузка пользовательской раскладки доков в проекте.  
  **Критерий готовности:** раскладка проекта специфична для каждого проекта.  
  **Файлы:** `app/ui/main_window.py`, `app/core/project.py`

- [P19-002] Подтверждение при закрытии, если есть несохранённые изменения.  
  **Критерий готовности:** диалог предупреждения появляется.  
  **Файлы:** `app/ui/main_window.py`

- [P19-003] Индикатор производительности (FPS канваса).  
  **Критерий готовности:** вкладка/статус с FPS обновляется.  
  **Файлы:** `app/ui/canvas.py`

---

## P20. Плагины

- [P20-001] Система плагинов: загрузка из `plugins/` (entry-point функция).  
  **Критерий готовности:** демонстрационный плагин виден в меню Help→Plugins.  
  **Файлы:** `app/core/plugins.py`, `plugins/example_plugin.py`

- [P20-002] API плагинов: добавление пункта меню и панели.  
  **Критерий готовности:** плагин добавляет свою док-панель.  
  **Файлы:** `app/core/plugins.py`, `plugins/example_plugin.py`

---

## P21. Локализация

- [P21-001] Инфраструктура Qt Linguist: `i18n/` и загрузка переводов.  
  **Критерий готовности:** переключение языка RU/EN в Preferences.  
  **Файлы:** `app/core/i18n.py`, `i18n/*.ts`, `i18n/*.qm`

- [P21-002] Пометить строки в UI для перевода.  
  **Критерий готовности:** `lupdate` находит строки, `linguist` открывает.  
  **Файлы:** `app/ui/*.py`

---

## P22. Сборка и дистрибуция

- [P22-001] PyInstaller spec файл, сборка в `dist/`.  
  **Критерий готовности:** запускаемый бинарник под текущую ОС.  
  **Файлы:** `build/editor.spec`

- [P22-002] Скрипт сборки ассетов в дистрибутив (копирование qss, шаблонов).  
  **Критерий готовности:** стили/иконки присутствуют в сборке.  
  **Файлы:** `build/package_assets.py`

---

## P23. Демо-проект и документация

- [P23-001] Добавить папку `examples/topdown_demo/` (простая сцена со спрайтами/тайлмапом).  
  **Критерий готовности:** проект открывается и рендерится.  
  **Файлы:** `examples/topdown_demo/*`

- [P23-002] Документация в `docs/` (быстрый старт + FAQ).  
  **Критерий готовности:** `docs/README.md` описывает базовый сценарий.  
  **Файлы:** `docs/README.md`

---

## Дополнительно (по желанию)

- [OPT-001] История действий (history panel) с навигацией по Undo Stack.  
- [OPT-002] Горячее дублирование узлов (Alt+Drag).  
- [OPT-003] Привязка к направляющим и углам поворота (шаг).  
- [OPT-004] Поддержка импортов JSON спрайт-листов (TexturePacker).  
- [OPT-005] Экспорт в другие рантаймы (Arcade, Godot scene JSON).

---

### Итоговая структура проекта (к моменту P23)
```
app/
  core/
    actions.py
    assets.py
    autosave.py
    commands.py
    exporter.py
    exporters/
      pygame_exporter.py
    i18n.py
    plugins.py
    project.py
    scene.py
    settings.py
    tilemap.py
  ui/
    canvas.py
    main_window.py
    themes/
      light.qss
      dark.qss
    docks/
      assets.py
      console.py
      hierarchy.py
      inspector.py
      layers.py
    dialogs/
      new_project.py
      preferences.py
    editors/
      animation_editor.py
      spritesheet_editor.py
  __init__.py
  main.py
build/
  editor.spec
  package_assets.py
docs/
  README.md
examples/
  topdown_demo/
i18n/
plugins/
  example_plugin.py
templates/
  pygame/
tests/
  test_assets_import.py
  test_main_window.py
  test_scene_serialization.py
README.md
LICENSE
.gitignore
pyproject.toml
pytest.ini
Makefile
requirements-lock.txt
```
